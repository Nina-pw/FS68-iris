// // src/services/cart.ts
// import axios from "./api"; // ‚úÖ ‡πÉ‡∏ä‡πâ instance ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á baseURL/withCredentials/interceptors ‡πÅ‡∏•‡πâ‡∏ß
// import type { Cart, CartItem } from "../types";

// export type CartSummary = { total_qty: number; subtotal: number };

// export type CartMeResponse = Cart & {
//   items: (CartItem & {
//     sku?: string;
//     shade_name?: string;
//     shade_code?: string;
//     image_url?: string | null;
//     price_now?: number;
//     stock_qty?: number;
//   })[];
//   summary: CartSummary;
// };

// export async function getCartMe() {
//   const token = localStorage.getItem("accessToken");
//   if (!token) throw new Error("Missing token");

//   const res = await fetch(`${import.meta.env.VITE_API_URL}/api/cart/me`, {
//     method: "GET",
//     headers: {
//       "Content-Type": "application/json",
//       Authorization: `Bearer ${token}`, // üëà ‡∏™‡πà‡∏á token ‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢
//     },
//     credentials: "include", // ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ cookie auth ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ
//   });

//   if (!res.ok) {
//     const msg = await res.text();
//     throw new Error(`Failed to fetch cart: ${res.status} ${msg}`);
//   }

//   return await res.json();
// }


// export async function addToCart(
//   variant_id: number,
//   qty = 1
// ): Promise<CartMeResponse> {
//   const { data } = await axios.post<CartMeResponse>("/api/cart/items", { variant_id, qty });
//   return data;
// }

// export async function setCartItemQty(
//   itemId: number,
//   qty: number
// ): Promise<CartMeResponse> {
//   const { data } = await axios.patch<CartMeResponse>(`/api/cart/items/${itemId}`, { qty });
//   return data;
// }

// export async function removeCartItem(itemId: number): Promise<CartMeResponse> {
//   const { data } = await axios.delete<CartMeResponse>(`/api/cart/items/${itemId}`);
//   return data;
// }

// src/services/cart.ts
import axios from "./api"; // ‚úÖ ‡∏°‡∏µ baseURL / withCredentials / interceptors ‡πÅ‡∏•‡πâ‡∏ß
import type { Cart, CartItem } from "../types";

export type CartSummary = { total_qty: number; subtotal: number };

export type CartMeResponse = Cart & {
  items: (CartItem & {
    sku?: string;
    shade_name?: string;
    shade_code?: string;
    image_url?: string | null;
    price_now?: number;
    stock_qty?: number;
  })[];
  summary: CartSummary;
};

/** ‡∏î‡∏∂‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô (‡πÉ‡∏ä‡πâ axios instance ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ headers/cookies ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥) */
export async function getCartMe(): Promise<CartMeResponse> {
  const { data } = await axios.get<CartMeResponse>("/api/cart/me", {
    // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö token ‡πÄ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞ interceptor ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÉ‡∏´‡πâ:
    // headers: { Authorization: `Bearer ${localStorage.getItem("accessToken") ?? ""}` }
  });
  return data;
}

export async function addToCart(
  variant_id: number,
  qty = 1
): Promise<CartMeResponse> {
  const { data } = await axios.post<CartMeResponse>("/api/cart/items", {
    variant_id,
    qty,
  });
  return data;
}

export async function setCartItemQty(
  itemId: number,
  qty: number
): Promise<CartMeResponse> {
  const { data } = await axios.patch<CartMeResponse>(
    `/api/cart/items/${itemId}`,
    { qty }
  );
  return data;
}

export async function removeCartItem(itemId: number): Promise<CartMeResponse> {
  const { data } = await axios.delete<CartMeResponse>(
    `/api/cart/items/${itemId}`
  );
  return data;
}

/**
 * ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 * - ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å POST /api/cart/clear ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
 * - ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ endpoint ‡∏î‡∏±‡∏á‡∏Å‡∏•‡πà‡∏≤‡∏ß (404/405) ‡∏à‡∏∞ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡πÑ‡∏≠‡πÄ‡∏ó‡πá‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏ï‡∏±‡∏ß
 * - ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤
 */
export async function clearCart(): Promise<CartMeResponse> {
  try {
    const { data } = await axios.post<CartMeResponse>("/api/cart/clear");
    return data;
  } catch (err: any) {
    const status = err?.response?.status;
    if (status === 404 || status === 405) {
      // üü° ‡πÑ‡∏°‡πà‡∏°‡∏µ /api/cart/clear ‚Üí ‡∏•‡∏ö‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏¥‡πâ‡∏ô‡πÅ‡∏ó‡∏ô
      const current = await getCartMe();
      const ids = current.items.map((i) => i.id);
      await Promise.all(
        ids.map((id) => axios.delete(`/api/cart/items/${id}`))
      );
      const after = await getCartMe();
      return after;
    }
    throw err;
  }
}
